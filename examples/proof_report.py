#!/usr/bin/env python3
"""
Generate a proof verification report for CI/CD.
"""

import json
import time
from pathlib import Path
from typing import Dict, Any

from formal_verification import FormalVerificationConflictDetector, Claim, PropertyType
from formal_verification.incremental_verifier import IncrementalVerifier
from formal_verification.proof_cache import ProofCache


def generate_markdown_report() -> str:
    """Generate a markdown report of verification status."""
    lines = []
    
    lines.append("# üîç Formal Verification Report")
    lines.append(f"Generated: {time.strftime('%Y-%m-%d %H:%M:%S UTC', time.gmtime())}\n")
    
    # Load verification state
    verifier = IncrementalVerifier()
    status = verifier.get_verification_status()
    
    # Overall statistics
    lines.append("## üìä Overall Statistics\n")
    lines.append(f"- **Total Functions**: {status['total_functions']}")
    lines.append(f"- **Proven**: {status['proven']} ‚úÖ")
    lines.append(f"- **Failed**: {status['failed']} ‚ùå")
    lines.append(f"- **Unverified**: {status['unverified']} ‚ö†Ô∏è")
    lines.append(f"- **Coverage**: {status['coverage']:.1%}")
    lines.append("")
    
    # Cache statistics
    cache = ProofCache()
    cache_stats = cache.get_stats()
    
    lines.append("## ‚ö° Performance Metrics\n")
    lines.append(f"- **Cache Hit Rate**: {cache_stats.get('hit_rate', 0):.1%}")
    lines.append(f"- **Average Proof Time**: {cache_stats.get('avg_proof_time_ms', 0):.1f}ms")
    lines.append(f"- **Cache Size**: {cache_stats.get('cache_size', 0)} entries")
    lines.append(f"- **Speedup from Cache**: {cache_stats.get('speedup', 1):.0f}x")
    lines.append("")
    
    # Function details
    if status['total_functions'] > 0:
        lines.append("## üìù Function Verification Status\n")
        lines.append("| Function | Status | Last Verified |")
        lines.append("|----------|--------|---------------|")
        
        # Get function details
        for func_name in list(verifier.state.functions.keys())[:10]:  # First 10
            func_status = verifier.get_function_status(func_name)
            if func_status:
                status_icon = {
                    'proven': '‚úÖ',
                    'failed': '‚ùå',
                    'unverified': '‚ö†Ô∏è'
                }.get(func_status['status'], '‚ùì')
                
                last_verified = "Never"
                if func_status['last_verified']:
                    last_verified = time.strftime('%Y-%m-%d', 
                                                  time.localtime(func_status['last_verified']))
                
                lines.append(f"| `{func_name}` | {status_icon} {func_status['status']} | {last_verified} |")
        
        if status['total_functions'] > 10:
            lines.append(f"\n*... and {status['total_functions'] - 10} more functions*")
        lines.append("")
    
    # Recent proofs
    lines.append("## üéØ Sample Verified Properties\n")
    
    sample_claims = [
        Claim("report", "10 + 15 = 25", PropertyType.CORRECTNESS, 0.95, time.time()),
        Claim("report", "factorial 5 = 120", PropertyType.CORRECTNESS, 0.92, time.time()),
        Claim("report", "forall x, x + 0 = x", PropertyType.CORRECTNESS, 0.90, time.time()),
    ]
    
    detector = FormalVerificationConflictDetector()
    results = detector.analyze_claims(sample_claims)
    
    for result in results['proof_results'][:5]:
        if result.proven and result.spec:
            lines.append(f"- ‚úÖ **Proven**: `{result.spec.claim.claim_text}`")
            lines.append(f"  - Time: {result.proof_time_ms:.1f}ms")
    lines.append("")
    
    # Recommendations
    lines.append("## üí° Recommendations\n")
    
    if status['coverage'] < 0.5:
        lines.append("- ‚ö†Ô∏è **Low coverage**: Consider adding more specifications")
    if status['failed'] > status['proven']:
        lines.append("- ‚ö†Ô∏è **Many failures**: Review failed proofs and fix specifications")
    if cache_stats.get('hit_rate', 0) < 0.3:
        lines.append("- üí° **Low cache hit rate**: Consider warming cache in CI")
    if status['coverage'] >= 0.8:
        lines.append("- ‚úÖ **Good coverage**: Verification is comprehensive")
    
    lines.append("")
    lines.append("---")
    lines.append("*Generated by Cognitive Dissonance DSPy Formal Verification Framework*")
    
    return "\n".join(lines)


def main():
    """Generate and print the report."""
    report = generate_markdown_report()
    print(report)
    
    # Also save to file
    with open("proof_report.md", "w") as f:
        f.write(report)
    
    return 0


if __name__ == "__main__":
    exit(main())