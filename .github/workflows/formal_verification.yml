name: Formal Verification CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  verify:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Coq
      run: |
        sudo apt-get update
        sudo apt-get install -y coq
        coqc --version
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install z3-solver
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Run formal verification
      run: |
        python -m cognitive_dissonance.main verify \
          --check-preconditions \
          --check-postconditions \
          --check-invariants
    
    - name: Incremental verification
      if: github.event_name == 'pull_request'
      run: |
        # Only verify changed functions
        python examples/ci_incremental_verify.py \
          --base-branch ${{ github.base_ref }} \
          --pr-branch ${{ github.head_ref }}
    
    - name: Generate proof report
      run: |
        python examples/proof_report.py > proof_report.md
    
    - name: Upload proof artifacts
      uses: actions/upload-artifact@v3
      with:
        name: proof-artifacts
        path: |
          proof_report.md
          .proof_cache/
          verification_state.json
    
    - name: Comment PR with verification results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('proof_report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üîç Formal Verification Results\n\n${report}`
          });
    
    - name: Fail if proofs incomplete
      run: |
        python -c "
        import json
        with open('verification_state.json') as f:
            state = json.load(f)
        coverage = state.get('coverage', 0)
        if coverage < 0.8:
            print(f'‚ùå Proof coverage {coverage:.1%} below threshold 80%')
            exit(1)
        print(f'‚úÖ Proof coverage {coverage:.1%} meets threshold')
        "